// Code generated by tygo. DO NOT EDIT.

//////////
// source: c2s.go

export interface C2SInit {
  auth_password?: string;
}
/**
 * Subscribs to all entities and tile changes from the given chunk
 * after receiving, if available, the server sends the full chunk tiles
 */
export interface C2SSubscribeRequest {
  chunkPos: { x: number; y: number; };
}
/**
 * cancels a previous subscribe request
 */
export interface C2SUnsubscribeRequest {
  chunkPos: { x: number; y: number; };
}

//////////
// source: other.go


export type Message =
| { kind: "init"; content: C2SInit; }
| { kind: "subscribe_request"; content: C2SSubscribeRequest; }
| { kind: "unsubscribe_request"; content: C2SUnsubscribeRequest; }
| { kind: "init"; content: S2CInit; }
| { kind: "full_chunk"; content: S2CFullChunk; }
| { kind: "tile_change"; content: S2CTileChange; }
| { kind: "unit"; content: S2CUnit; }
| { kind: "unit_despawn"; content: S2CUnitDespawn; }
| { kind: "unit_started_action"; content: S2CUnitStartedAction; }
| { kind: "unit_finished_action"; content: S2CUnitFinishedAction; }
| { kind: "player_spawn"; content: S2CPlayerSpawn; }
;

/**
 * Sent as a response to C2SInit
 */
export interface ActionData {
  actionOpCode: any /* model.ActionOpCode */;
  reportId: string;
  parameter?: any;
}
/**
 * sent by the server when a unit dies or gets out of the subscribed chunks
 */
export interface PlayerDespawnContent {
  id: string;
}

//////////
// source: s2c.go

export interface S2CInit {
  chunkSize: number /* int */;
  setup?: any /* model.SetupResponse */;
  costs?: any /* model.CostsResponse */;
}
export interface S2CFullChunk {
  chunkPos: { x: number; y: number; };
  /**
   * will be base64 encoded
   * each tile has two bytes, one for the kind and one for its value
   * see terrain/tile.go for the correspondance
   * encoded in row-major order
   * can be empty if the chunk isn't generated
   */
  tiles: string;
}
export interface S2CTileChange {
  tilePos: { x: number; y: number; };
  kind: number;
  value: number;
}
export interface S2CUnit {
  opCode: string;
  unitId: string;
  owner: string;
  position: { x: number; y: number; };
  upgraded: boolean;
}
export interface S2CUnitDespawn {
  unitId: string;
}
export interface S2CUnitStartedAction {
  unitId: string;
  action: ActionData;
}
export interface S2CUnitFinishedAction {
  unitId: string;
  action: ActionData;
  report: any /* model.IReport */;
}
export interface S2CPlayerSpawn {
  id: string;
  spawnPosition: { x: number; y: number; };
  username: string;
  resources: any /* model.Resources */;
}
